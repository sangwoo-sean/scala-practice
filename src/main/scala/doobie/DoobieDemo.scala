package doobie

import cats.effect.{ExitCode, IO, IOApp}
import doobie.implicits._

case class Person(id: Long, name: String, age: Int)

object DoobieDemo extends IOApp {

  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }

  private val xa = Transactor.fromDriverManager[IO](
    "org.postgresql.ds.PGSimpleDataSource",
    "jdbc:postgresql:postgres",
    "postgres",
    "1111"
  )

  def findAllPeopleNames: IO[List[String]] = {
    val query  = sql"select person.name from person".query[String]
    val action = query.to[List]
    action.transact(xa)
  }

  def findPersonById(id: Long) = {
    val query = sql"select name from person where id=$id".query[String]
    val action = query.option
    action.transact(xa)
  }

  def findPeopleStream = {
    sql"select name from person".query[String].stream.compile.toList.transact(xa)
  }

  def findPersonByName(name: String) = {
    val queryString = "select id, name, age from person where name = ?"
    HC.stream[Person](
      queryString,
      HPS.set(name),
      100
    ).compile.toList.map(_.headOption).transact(xa)
  }

  def findPeopleByInitial(letter: String) = {
    val selectPart = fr"select id, name, age"
    val fromPart = fr"from person"
    val wherePart = fr"where LEFT(name, 1) = $letter"

    val statement = selectPart ++ fromPart ++ wherePart
    statement.query[Person].stream.compile.toList.transact(xa)
  }

  def savePerson(name: String, age: Int) = {
    val query = sql"insert into person (name, age) values ($name, $age)"
    query.update.run.transact(xa)
  }

  def savePersonAutoGenerated(name: String, age: Int) = {
    val query = sql"insert into person (name, age) values ($name, $age)"
    query.update.withUniqueGeneratedKeys[Long]("id").transact(xa)
  }

  def savePerson_v2(id: Long, name: String, age: Int) = {
    val queryString = "insert into person (id, name, age) values (?, ?, ?)"
    Update[Person](queryString).run(Person(id, name, age)).transact(xa)
  }

  def savePersonBulk(people: List[Person]) = {
    val queryString = "insert into person (id, name, age) values (?, ?, ?)"
    val updateAction = Update[Person](queryString)
      .updateManyWithGeneratedKeys[Person]("id", "name", "age")(people)
    updateAction.compile.toList.transact(xa)
  }

  override def run(args: List[String]): IO[ExitCode] =
    savePersonBulk(List(Person(18, "new1", 1), Person(19, "new2", 2))).debug().as(ExitCode.Success)
}
